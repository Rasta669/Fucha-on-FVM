{"version":3,"sources":["../src/index.ts"],"names":["leb","Int64","blake2b","uint8arrays","utils","base32","base32Function","DelegatedNamespace","Protocol","CoinType","defaultCoinType","MAIN","coinTypes","Object","values","protocols","filter","p","payloadHashLength","blsPublicKeyBytes","maxSubaddressLen","namespaceByteLen","toBuffer","length","maxInt64StringLength","checksumHashLength","ethAddressLength","addressHash","ingest","Address","constructor","bytes","coinType","Error","_coinType","protocol","network","payload","slice","namespace","DELEGATED","toNumber","subAddr","subAddrHex","toString","encode","equals","addr","bigintToArray","v","tmp","BigInt","fromString","getChecksum","validateChecksum","data","checksum","newAddress","protocolByte","unsigned","concat","newIDAddress","id","ID","newActorAddress","ACTOR","newSecp256k1Address","pubkey","SECP256K1","newBLSAddress","BLS","newDelegatedAddress","MAX_INT","namespaceBuf","newDelegatedEthAddress","ethAddr","isAddress","EVM","arrayify","decode","address","checkAddressString","prefix","subAddrBytes","namespaceByte","checksumBytes","newFromString","validateAddressString","addressString","error","includes","join","Number","raw","isNaN","splitIndex","indexOf","namespaceStr","subAddrCksmStr","subAddrCksmBytes","namespaceNumber","payloadCksm","idFromAddress","parseInt","delegatedFromEthAddress","TEST","ethAddressFromDelegated","delegated","getAddress","ethAddressFromID","idAddress","buffer","ArrayBuffer","dataview","DataView","setUint8","setBigUint64","Uint8Array"],"mappings":"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","sourcesContent":["import * as leb from 'leb128'\nimport Int64 from 'node-int64'\nimport { blake2b } from 'blakejs'\nimport * as uint8arrays from 'uint8arrays'\nimport { utils } from 'ethers'\nimport { base32 as base32Function } from './base32'\nimport { DelegatedNamespace, Protocol } from './enums'\nimport { CoinType } from './coinType'\n\nexport * from './coinType'\nexport * from './enums'\n\nexport interface AddressData {\n  protocol: Protocol\n  payload: Uint8Array\n  coinType: CoinType\n  namespace?: number\n}\n\nconst defaultCoinType = CoinType.MAIN\nconst base32 = base32Function('abcdefghijklmnopqrstuvwxyz234567')\n\n// Store valid CoinTypes / Protocols for runtime validation\nconst coinTypes = Object.values(CoinType)\nconst protocols = Object.values(Protocol).filter(p => typeof p === 'number')\n\n// Defines the hash length taken over addresses\n// using the Actor and SECP256K1 protocols.\nconst payloadHashLength = 20\n\n// The length of a BLS public key\nconst blsPublicKeyBytes = 48\n\n// The maximum length of a delegated address's sub-address.\nconst maxSubaddressLen = 54\n\n// The number of bytes that are reserved for namespace\nconst namespaceByteLen = new Int64(0).toBuffer().length\n\n// The maximum length of `int64` as a string.\nconst maxInt64StringLength = 19\n\n// The hash length used for calculating address checksums.\nconst checksumHashLength = 4\n\n// The length of an Ethereum address in bytes\nconst ethAddressLength = 20\n\nfunction addressHash(ingest: Uint8Array): Uint8Array {\n  return blake2b(ingest, null, payloadHashLength)\n}\n\nexport class Address {\n  readonly bytes: Uint8Array\n  readonly _coinType: CoinType\n\n  constructor(bytes: Uint8Array, coinType: CoinType = defaultCoinType) {\n    if (!bytes || !bytes.length) throw new Error('Missing bytes in address')\n\n    this.bytes = bytes\n    this._coinType = coinType\n\n    if (!(this.protocol() in Protocol)) {\n      throw new Error(`Invalid protocol ${this.protocol()}`)\n    }\n  }\n\n  network(): CoinType {\n    return this._coinType\n  }\n\n  coinType(): CoinType {\n    return this._coinType\n  }\n\n  protocol(): Protocol {\n    return this.bytes[0]\n  }\n\n  payload(): Uint8Array {\n    return this.bytes.slice(1)\n  }\n\n  get namespace(): number {\n    if (this.protocol() !== Protocol.DELEGATED)\n      throw new Error('Can only get namespace for delegated addresses')\n    return new Int64(this.payload().slice(0, namespaceByteLen)).toNumber()\n  }\n\n  get subAddr(): Uint8Array {\n    if (this.protocol() !== Protocol.DELEGATED)\n      throw new Error('Can only get subaddress for delegated addresses')\n    return this.payload().slice(namespaceByteLen)\n  }\n\n  get subAddrHex(): string {\n    return uint8arrays.toString(this.subAddr, 'hex')\n  }\n\n  /**\n   * toString returns a string representation of this address. If no \"coinType\"\n   * parameter was passed to the constructor the address will be prefixed with\n   * the default coinType prefix \"f\" (mainnet).\n   */\n  toString(): string {\n    return encode(this._coinType, this)\n  }\n\n  /**\n   * equals determines if this address is the \"same\" address as the passed\n   * address. Two addresses are considered equal if they are the same instance\n   * OR if their \"bytes\" property matches byte for byte.\n   */\n  equals(addr: Address): boolean {\n    if (this === addr) {\n      return true\n    }\n    return uint8arrays.equals(this.bytes, addr.bytes)\n  }\n}\n\nexport function bigintToArray(v: string | bigint | number): Uint8Array {\n  let tmp = BigInt(v).toString(16)\n  if (tmp.length % 2 === 1) tmp = `0${tmp}`\n  return uint8arrays.fromString(tmp, 'base16')\n}\n\nexport function getChecksum(ingest: string | Uint8Array): Uint8Array {\n  return blake2b(ingest, null, checksumHashLength)\n}\n\nexport function validateChecksum(\n  data: string | Uint8Array,\n  checksum: Uint8Array\n): boolean {\n  return uint8arrays.equals(getChecksum(data), checksum)\n}\n\nexport function newAddress(\n  protocol: Protocol,\n  payload: Uint8Array,\n  coinType?: CoinType\n): Address {\n  const protocolByte = leb.unsigned.encode(protocol)\n  return new Address(uint8arrays.concat([protocolByte, payload]), coinType)\n}\n\nexport function newIDAddress(\n  id: number | string,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.ID, leb.unsigned.encode(id), coinType)\n}\n\n/**\n * newActorAddress returns an address using the Actor protocol.\n */\nexport function newActorAddress(\n  data: Uint8Array,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.ACTOR, addressHash(data), coinType)\n}\n\n/**\n * newSecp256k1Address returns an address using the SECP256K1 protocol.\n */\nexport function newSecp256k1Address(\n  pubkey: Uint8Array,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.SECP256K1, addressHash(pubkey), coinType)\n}\n\n/**\n * newBLSAddress returns an address using the BLS protocol.\n */\nexport function newBLSAddress(\n  pubkey: Uint8Array,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.BLS, pubkey, coinType)\n}\n\n/**\n * newDelegatedAddress returns an address using the Delegated protocol.\n */\nexport function newDelegatedAddress(\n  namespace: number,\n  subAddr: Uint8Array,\n  coinType?: CoinType\n): Address {\n  if (namespace > Int64.MAX_INT)\n    throw new Error('Namespace must be less than 2^63')\n\n  if (subAddr.length > maxSubaddressLen)\n    throw new Error('Subaddress address length')\n\n  const namespaceBuf = new Int64(namespace).toBuffer()\n\n  return newAddress(\n    Protocol.DELEGATED,\n    uint8arrays.concat([namespaceBuf, subAddr]),\n    coinType\n  )\n}\n\n/**\n * newDelegatedEthAddress returns an address for eth using the Delegated protocol.\n */\nexport function newDelegatedEthAddress(\n  ethAddr: string,\n  coinType?: CoinType\n): Address {\n  if (!utils.isAddress(ethAddr)) throw new Error('Invalid Ethereum address')\n\n  return newDelegatedAddress(\n    DelegatedNamespace.EVM,\n    utils.arrayify(ethAddr),\n    coinType\n  )\n}\n\nexport function decode(address: string): Address {\n  const { protocol, payload, coinType } = checkAddressString(address)\n  return newAddress(protocol, payload, coinType)\n}\n\nexport function encode(coinType: string, address: Address): string {\n  if (!address || !address.bytes) throw Error('Invalid address')\n\n  const protocol = address.protocol()\n  const payload = address.payload()\n  const prefix = `${coinType}${protocol}`\n\n  switch (protocol) {\n    case Protocol.ID: {\n      return `${prefix}${leb.unsigned.decode(payload)}`\n    }\n    case Protocol.DELEGATED: {\n      const namespace = address.namespace\n      const subAddrBytes = address.subAddr\n      const protocolByte = leb.unsigned.encode(protocol)\n      const namespaceByte = leb.unsigned.encode(namespace)\n      const checksumBytes = getChecksum(\n        uint8arrays.concat([protocolByte, namespaceByte, subAddrBytes])\n      )\n\n      const bytes = uint8arrays.concat([subAddrBytes, checksumBytes])\n      return `${prefix}${namespace}f${base32.encode(bytes)}`\n    }\n    default: {\n      const checksum = getChecksum(address.bytes)\n      const bytes = uint8arrays.concat([payload, checksum])\n      return `${prefix}${base32.encode(bytes)}`\n    }\n  }\n}\n\nexport function newFromString(address: string): Address {\n  return decode(address)\n}\n\nexport function validateAddressString(addressString: string): boolean {\n  try {\n    checkAddressString(addressString)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nexport function checkAddressString(address: string): AddressData {\n  if (typeof address !== 'string' || address.length < 3)\n    throw Error('Address should be a string of at least 3 characters')\n\n  const coinType = address[0] as CoinType\n  if (!coinTypes.includes(coinType))\n    throw Error(`Address cointype should be one of: ${coinTypes.join(', ')}`)\n\n  const protocol = Number(address[1]) as Protocol\n  if (!protocols.includes(protocol))\n    throw Error(`Address protocol should be one of: ${protocols.join(', ')}`)\n\n  const raw = address.slice(2)\n\n  switch (protocol) {\n    case Protocol.ID: {\n      if (raw.length > maxInt64StringLength)\n        throw Error('Invalid ID address length')\n      if (isNaN(Number(raw))) throw Error('Invalid ID address')\n      const payload = leb.unsigned.encode(raw)\n      return { protocol, payload, coinType }\n    }\n\n    case Protocol.DELEGATED: {\n      const splitIndex = raw.indexOf('f')\n      if (splitIndex === -1) throw new Error('Invalid delegated address')\n\n      const namespaceStr = raw.slice(0, splitIndex)\n      if (namespaceStr.length > maxInt64StringLength)\n        throw new Error('Invalid delegated address namespace')\n\n      const subAddrCksmStr = raw.slice(splitIndex + 1)\n      const subAddrCksmBytes = base32.decode(subAddrCksmStr)\n      if (subAddrCksmBytes.length < checksumHashLength)\n        throw Error('Invalid delegated address length')\n\n      const subAddrBytes = subAddrCksmBytes.slice(0, -checksumHashLength)\n      const checksumBytes = subAddrCksmBytes.slice(subAddrBytes.length)\n      if (subAddrBytes.length > maxSubaddressLen)\n        throw Error('Invalid delegated address length')\n\n      const protocolByte = leb.unsigned.encode(protocol)\n      const namespaceNumber = Number(namespaceStr)\n      const namespaceByte = leb.unsigned.encode(namespaceNumber)\n      const bytes = uint8arrays.concat([\n        protocolByte,\n        namespaceByte,\n        subAddrBytes\n      ])\n\n      if (!validateChecksum(bytes, checksumBytes))\n        throw Error('Invalid delegated address checksum')\n\n      const namespaceBuf = new Int64(namespaceNumber).toBuffer()\n      const payload = uint8arrays.concat([namespaceBuf, subAddrBytes])\n      return { protocol, payload, coinType, namespace: namespaceNumber }\n    }\n\n    case Protocol.SECP256K1:\n    case Protocol.ACTOR:\n    case Protocol.BLS: {\n      const payloadCksm = base32.decode(raw)\n      if (payloadCksm.length < checksumHashLength)\n        throw Error('Invalid address length')\n\n      const payload = payloadCksm.slice(0, -checksumHashLength)\n      const checksum = payloadCksm.slice(payload.length)\n\n      if (protocol === Protocol.SECP256K1 || protocol === Protocol.ACTOR)\n        if (payload.length !== payloadHashLength)\n          throw Error('Invalid address length')\n\n      if (protocol === Protocol.BLS)\n        if (payload.length !== blsPublicKeyBytes)\n          throw Error('Invalid address length')\n\n      const protocolByte = leb.unsigned.encode(protocol)\n      const bytes = uint8arrays.concat([protocolByte, payload])\n      if (!validateChecksum(bytes, checksum))\n        throw Error('Invalid address checksum')\n\n      return { protocol, payload, coinType }\n    }\n\n    default:\n      throw Error(`Invalid address protocall: ${protocol}`)\n  }\n}\n\n/**\n * idFromAddress extracts the ID from an ID address.\n */\nexport function idFromAddress(address: Address): number {\n  if (address.protocol() !== Protocol.ID)\n    throw new Error('Cannot get ID from non ID address')\n  // An unsigned varint should be less than 2^63 which is < Number.MAX_VALUE.\n  // So this number SHOULD be representable in JS and safe to parseInt.\n  // https://github.com/multiformats/unsigned-varint\n  // TODO: does leb128 enforce the max value?\n  return parseInt(leb.unsigned.decode(address.payload()), 10)\n}\n\n/**\n * delegatedFromEthAddress derives the f410 address from an ethereum hex address\n */\n\nexport function delegatedFromEthAddress(\n  ethAddr: string,\n  coinType: CoinType = CoinType.TEST\n): string {\n  return newDelegatedEthAddress(ethAddr, coinType).toString()\n}\n\n/**\n * ethAddressFromDelegated derives the ethereum address from an f410 address\n */\n\nexport function ethAddressFromDelegated(delegated: string): string {\n  return utils.getAddress(`0x${decode(delegated).subAddrHex}`)\n}\n\n/**\n * ethAddressFromID derives the ethereum address from an f0 address\n */\n\nexport function ethAddressFromID(idAddress: string): string {\n  const address = decode(idAddress)\n  const id = idFromAddress(address)\n  const buffer = new ArrayBuffer(ethAddressLength)\n  const dataview = new DataView(buffer)\n  dataview.setUint8(0, 255)\n  dataview.setBigUint64(12, BigInt(id), false)\n  return `0x${uint8arrays.toString(new Uint8Array(buffer), 'hex')}`\n}\n\nexport default {\n  Address,\n  newAddress,\n  newIDAddress,\n  newActorAddress,\n  newSecp256k1Address,\n  newBLSAddress,\n  newFromString,\n  bigintToArray,\n  decode,\n  encode,\n  getChecksum,\n  validateChecksum,\n  validateAddressString,\n  checkAddressString,\n  idFromAddress,\n  delegatedFromEthAddress,\n  ethAddressFromDelegated,\n  CoinType,\n  Protocol\n}\n"],"file":"index.js"}